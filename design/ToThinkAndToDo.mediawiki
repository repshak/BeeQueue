= ToDo =
* BuzzTable toString
* BuzzTable sorting
* Buzz: SimpleForm: given array of BuzzAttribute's generate form to edit json (array or map)
== ToTest ==
* sorting
== ToThink ==
* Eat you own dog food: use BeeQueue as build/ci subsytem.
** on macosx
** on linux
** on windows.
* automatically test agent statistics and killing 
* Implement TestCases
** [[TestCase1.mediawiki|TestCase1 - Load Balancing]]
** [[TestCase2.mediawiki|TestCase2 - Swinng pool chlorination and water level]]
* GUI design
** Rework screens 
** Log visualization
* Record somewhere that how many runs are failing/succeeding on stage, job and message levels
* Host - Architecture - Datastores rules to match host to particular stage
* How job that mark message/job complete, and 
* How to set deadline if that did not happened on time
* Scheduling/Matching logic to assign job to Message
* Deployment bq.jar: conditional unpack only if version, in bq.properties does not match already downloaded, delete old one

== Done ==
* Buzz: Automatic restart
* BuzzSchema
* fix /db and /query urls
* Relpace wingstone with [[Jetty.mediawiki]] container
* Launcher has to specify what cloud it is in on start
* Evaluate blocked stages.
* dbmodel change
* Write [[DeveloperSetup]] page
* Visualization
** query and drilldown and action config
** json visualization 
*** modify it to run visualization automatically on all json data pulled on the web
* Build better test case: 
** test scripts that produce std output/ std error , and spawn other processes
* command to push configuration to cloud
* BeatLogic
** Run ps. Identify all processes that currently executed.  Check all processes that finished on host an update their stages appropriately.
** Execute run template and collect logs.
** create runs for unblocked stages. Pick runs to execute. 
** encapsulate logic from WorkerServlet.Runable into BeatLogic object
** ensureDomains
** Process all messages and create stages, 
* command line tool to generate new messages.
* BUG with file synchronization
* $BQ_HOST/jvm.#port#.csv
** maintain for worker that running
** cleanup dead workers info (workers that did not update its status form more then 1 hour).
** shutdown other bq.jar if its already running on this machine 
* load configuration into database and subscribe for updates
* create configuration to seed domains & clouds 
* HashStore
** design
** object model
** db implementation
*** push
*** pull(rename and swap)
* IdFactory
* build target tha allow to test and debug web content inline 
* TestCases
** [[TestCase1.mediawiki|TestCase1 - Load Balancing]]
*** Create config/and script for testcase 
* POJO
** HostGroup
*** Host
*** Worker
** Domain, MessageTemplate, JobTemplate, StageTemplate
*** configration.json
* modify WorkerServlet to push json data out
* schedule agent runs in each worker
* Deployment bq.jar
** change default port for bq.jar to 7532
** BQ_HOME
*** establish or pickup BQ_HOME ( default to `pwd`/bq-home/ )
*** autodeployment of agent native libraries into $BQ_HOME/web/WEB-INF/lib
*** autodeployment web application $BQ_HOME/web/
*** establish host specific directory in $BQ_HOME/hosts/##hostname##/ (set environment in BQ_HOST)
* json visualization 
** copy page with all dependencies from http://chris.photobooks.com/json/default.htm
* Agent
** test agent on mac.
* deploy schema to derby
* stand alone derby script
* simplify db schema for faster develpoment
* Add names in msg/job/stage to minimize joins
* Add domain_cd into NN_MESSAGE
* Enums: 
** RunState 
** StageState
** JobState
** DomainState
** AlertLevel
** MessageState
