= ToDo =
* load configuration into database and subscribe for updates
* query and drilldown and action config
* POJO
** BeeQueueMessage
*** BeeQueueJob
*** BeeQueueStage
*** BeeQueueRun
* json visualization 
** modify it to run visualization automatically on all json data pulled on the web
* $BQ_HOST/worker.csv
** maintain for worker that running
** cleanup dead workers info (workers that did not update its status form more then 1 hour).
** header: pid,ts,active, available_cpu,total_cpu,available_ram,total_ram,status
** shutdown other bq.jar if its already running on this machine 
* Deployment bq.jar
** BQ_HOME
*** conditional unpack only if version, in bq.properties does not match already downloaded, delete old one
*** establish system wide configuration is in $BQ_HOME/system.json
** test agent on windows.
* coordination datasource configuration is in $BQ_HOME/system.json

== ToTest ==
* TestCases
** [[TestCase1.mediawiki|TestCase1 - Load Balancing]]
** [[TestCase2.mediawiki|TestCase2 - Swinng pool chlorination and water level]]

== ToThink ==

* Record somewhere that runs are failing on stage, job and message levels
* Host - Architecture - Datastores rules to match host to particular stage
* How job that mark message/job complete, and 
* How to set deadline if that did not happened on time
* Scheduling/Matching logic to assign job to Message
* DbMapping
** DbType (INT,BIGINT*,FLOAT,BOOLEAN*,VARCHAR*,CLOB*,DATE,TIMESTAMP*,BLOB)
* DataType,Column,Set

== Done ==
* create configuration to seed domains & clouds 
* HashStore
** design
** object model
** db implementation
*** push
*** pull(rename and swap)
* IdFactory
* build target tha allow to test and debug web content inline 
* TestCases
** [[TestCase1.mediawiki|TestCase1 - Load Balancing]]
*** Create config/and script for testcase 
* POJO
** HostGroup
*** Host
*** Worker
** Domain, MessageTemplate, JobTemplate, StageTemplate
*** configration.json
* modify WorkerServlet to push json data out
* schedule agent runs in each worker
* Deployment bq.jar
** change default port for bq.jar to 7532
** BQ_HOME
*** establish or pickup BQ_HOME ( default to `pwd`/bq-home/ )
*** autodeployment of agent native libraries into $BQ_HOME/web/WEB-INF/lib
*** autodeployment web application $BQ_HOME/web/
*** establish host specific directory in $BQ_HOME/hosts/##hostname##/ (set environment in BQ_HOST)
* json visualization 
** copy page with all dependencies from http://chris.photobooks.com/json/default.htm
* Agent
** test agent on mac.
* deploy schema to derby
* stand alone derby script
* simplify db schema for faster develpoment
* Add names in msg/job/stage to minimize joins
* Add domain_cd into NN_MESSAGE
* Enums: 
** RunState 
** StageState
** JobState
** DomainState
** AlertLevel
** MessageState
